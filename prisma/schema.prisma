// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id                 String          @id @default(auto()) @map("_id") @db.ObjectId
    role               String          @default("STUDENT")
    name               String
    email              String          @unique
    password           String?
    image              String?         @default("https://gurukul-webapp.s3.ap-south-1.amazonaws.com/307ce493-b254-4b2d-8ba4-d12c080d6651.jpg")
    about              String?
    gender             String?
    mobile             String?
    age                Int?
    bookmarkedTeachers String[]        @default([])
    emailVerified      DateTime?
    classrooms         Classroom[]
    forums             Forum[]
    courses            String[]        @db.ObjectId
    posts              Post[]
    pomodoroSessions   Pomodoro[]
    accounts           Account[]
    sessions           Session[]
    Authenticator      Authenticator[]
    comments           Comment[]
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @id @map("_id")
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, credentialID])
}

model Classroom {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    ClassroomName String
    teacherId     String   @db.ObjectId
    notes         String[] @default([])
    forums        String[] @default([]) @db.ObjectId
    students      String[] @default([]) @db.ObjectId
    User          User?    @relation(fields: [userId], references: [id])
    userId        String?  @db.ObjectId
}

model Forum {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    chats     String[]
    teacherId String   @db.ObjectId
    studentId String[] @db.ObjectId
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?  @db.ObjectId
}

model Chat {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    forumId     String? @db.ObjectId
    classroomId String? @db.ObjectId
    uId         String  @db.ObjectId
    message     String
}

model Course {
    id                     String   @id @default(auto()) @map("_id") @db.ObjectId
    title                  String?
    subtitle               String?
    description            String?
    category               String?
    courseImage            String?  @default("https://cdn.pixabay.com/photo/2021/03/19/11/42/pencil-6107347_1280.jpg")
    coursePromotionalVideo String?
    difficulty             String?
    language               String?
    price                  Int?
    isCourseFree           Boolean?
    students               String[] @default([])
    published              Boolean  @default(false)
    createdAt              DateTime @default(now())
    updatedAt              DateTime @updatedAt
    userId                 String?
    sections               Json?
}

model StudentAnswer {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    studentId  String
    questionId String
    sectionId  String
    answer     String
    marks      Int?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Post {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    description String?
    media       String?
    teacherId   String? @db.ObjectId
    studentId   String? @db.ObjectId
    User        User?   @relation(fields: [userId], references: [id])
    userId      String? @db.ObjectId
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    sectionId String
    content   String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}

model Pomodoro {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    studentId String   @db.ObjectId
    time      DateTime
    Student   User     @relation(fields: [studentId], references: [id])
}

model Testimonials {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    studentId   String @db.ObjectId
    rating      Int
    review      String
    studentName String
}

model UserProgress {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    courseId          String   @db.ObjectId
    progress          Float    @default(0.0) // Progress percentage (0-100)
    completed         Boolean  @default(false) // If the user has completed the course
    completedSections String[] @default([]) // Array of completed section IDs
    completedLessons  String[] @default([]) // Array of completed lesson IDs
    quizScores        Json? // Store quiz scores per lesson/section
    startedAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([userId, courseId]) // Ensures a user has only one progress entry per course
}

model Transaction {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String
    courseId  String
    orderId   String   @unique
    amount    Int
    status    String   @default("pending") // "pending", "success", "failed"
    createdAt DateTime @default(now())
}
