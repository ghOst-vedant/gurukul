// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  role             String          @default("STUDENT")
  name             String
  email            String          @unique
  password         String?
  image            String?
  emailVerified    DateTime?
  classrooms       Classroom[]
  forums           Forum[]
  courses          Course[]
  posts            Post[]
  pomodoroSessions Pomodoro[]
  tests            Test[]
  accounts         Account[]
  sessions         Session[]
  Authenticator    Authenticator[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Classroom {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ClassroomName String
  teacherId     String   @db.ObjectId
  notes         String[] @default([])
  forums        String[] @default([]) @db.ObjectId
  students      String[] @default([]) @db.ObjectId
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?  @db.ObjectId
}

model Forum {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  chats     String[]
  teacherId String   @db.ObjectId
  studentId String[] @db.ObjectId
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Chat {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  forumId     String? @db.ObjectId
  classroomId String? @db.ObjectId
  uId         String  @db.ObjectId
  message     String
}

model Course {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  teacherId   String        @db.ObjectId
  title       String
  subtitle    String
  description String?
  category    String
  imageUrl    String?       @default("https://cdn.pixabay.com/photo/2021/03/19/11/42/pencil-6107347_1280.jpg")
  attachments Attachments[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?       @db.ObjectId
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?       @db.ObjectId
}

model Category {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String   @unique
  course Course[]
}

model Attachments {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  Course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String? @db.ObjectId
  name     String
  url      String
}

model Test {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  descriptiveQuestions String[]
  date                 DateTime
  courseId             String   @db.ObjectId
  result               String[] @db.ObjectId
  Student              String[] @db.ObjectId
  User                 User?    @relation(fields: [userId], references: [id])
  userId               String?  @db.ObjectId
}

model Post {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  media       String?
  teacherId   String? @db.ObjectId
  studentId   String? @db.ObjectId
  User        User?   @relation(fields: [userId], references: [id])
  userId      String? @db.ObjectId
}

model Pomodoro {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId String   @db.ObjectId
  time      DateTime
  Student   User     @relation(fields: [studentId], references: [id])
}

model Testimonials {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String @db.ObjectId
  rating      Int
  review      String
  studentName String
}
